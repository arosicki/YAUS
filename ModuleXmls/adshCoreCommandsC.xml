<?xml version="1.0" encoding="utf-8"?>
<Commands>
    <Command Name="test" Description="Prints test string" Synopsis="Prints test string">
        <Arguments>
            <Argument Name="value" Mandatory="True" Position="0" Type="String" Description="First value to print" />
            <Argument Name="value2" Mandatory="False" Position="1" Type="String" Description="Second value to print" />
        </Arguments>
        <Examples>
            <Example value='echo "Hello" "User"'></Example>
            <Example value='echo "Have a nice day"'></Example>
        </Examples>
        <Code>Write-Host "$value $value2"</Code>
    </Command>
    <Command Name="version" Description="Prints Current Active Directory Shell Version."
        Synopsis="Prints Current ADSH Version.">
        <Arguments>
        </Arguments>
        <Examples>
            <Example value="version"></Example>
        </Examples>
        <Code>Write-Host "$global:AdshVersion"</Code>
    </Command>
    <Command Name="cls" Description="Clears Terminal" Synopsis="Clears Terminal">
        <Arguments>
        </Arguments>
        <Examples>
            <Example value="cls"></Example>
        </Examples>
        <Code>Clear-Host</Code>
    </Command>
    <Command Name="cd"
        Description="Changes current directory to specified. Symbols: ~ home dir, . current dir, / root dir,  .. previous dir. "
        Synopsis="Changes current directory to specified.">
        <Arguments>
            <Argument Name="directory" Mandatory="True" Position="0" Type="String" Description="Directory" />
        </Arguments>
        <Examples>
            <Example value="cd /com/example/users/"></Example>
            <Example value="cd ~/users/"></Example>
            <Example value="cd ./users/"></Example>
        </Examples>
        <Code>
            $tempDir = @()
            $tempHomeDir = ""
            $global:ADSHhome.DistinguishedName.split(",") | ForEach-Object {
                $tempHomeDir = "/" + $_.split("=")[1] + $tempHomeDir
            }
            $directory = $directory -replace "$tempHomeDir","~"
            $directory = $directory -replace '(^/)|(/$)',""
            $tempDir = $directory.split("/")
            $initialPosition = $global:currentLoc
            for ($i = 0; $i -lt $tempDir.Count; $i++){
                switch ($tempDir[$i]) {
                    "" { break }
                    "." { break }
                    ".." { $global:currentLoc = $global:objects | Where-Object { $global:currentLoc.PreviousObject -eq $_.DistinguishedName }; break }
                    "~" { $global:currentLoc = $global:ADSHhome ; break }
                    Default {
                        $target = $global:objects | Where-Object { $global:currentLoc.DistinguishedName -eq $_.PreviousObject -and $_.Name -eq $tempDir[$i] }
                        if ($null -eq $target) {
                            Write-Host "No $_ dir found. Aborting."
                            $global:currentLoc = $initialPosition
                            return
                        }
                        elseif ($target.ObjectClass -in ("organizationalUnit", "container", "domainDNS", "msDS-QuotaContainer", "msTPM-InformationObjectsContainer")) {
                            $global:currentLoc = $target;
                            break
                        }
                        else {
                            Write-Host "$_ is not a container or OU. Aborting."
                            $global:currentLoc = $initialPosition
                            return
                        }
                    }
                }
            }
        </Code>
    </Command>
    <Command Name="ls" Description="Lists Files in current or specified dir." Synopsis="Lists Files in current or specified dir.">
        <Arguments>
            <Argument Name="directory" Mandatory="false" Position="0" Type="String" Description="Directory to show contents of" /> 
        </Arguments>
        <Examples>
            <Example value="ls ~ R"></Example>
            <Example value="ls ~/users/"></Example>
            <Example value="ls ."></Example>
        </Examples>
        <Code>
            $tempDir = @()
            $delObjectTarget = $global:currentLoc
            $tempHomeDir = ""
            $global:ADSHhome.DistinguishedName.split(",") | ForEach-Object {
                $tempHomeDir = "/" + $_.split("=")[1] + $tempHomeDir
            }
            $directory = $directory -replace "$tempHomeDir","~"
            $directory = $directory -replace '(^/)|(/$)',""
            $tempDir = $directory.split("/")
            for ($i = 0; $i -lt $tempDir.Count; $i++){
                switch ($tempDir[$i]) {
                    "" { break }
                    "." { break }
                    ".." { $delObjectTarget = $global:objects | Where-Object { $delObjectTarget.PreviousObject -eq $_.DistinguishedName }; break }
                    "~" { $delObjectTarget = $global:ADSHhome ; break }
                    Default {
                        $target = $global:objects | Where-Object { $delObjectTarget.DistinguishedName -eq $_.PreviousObject -and $_.Name -eq $tempDir[$i] }
                        if ($null -eq $target) {
                            Write-Host "No $_ object found. Aborting."
                            return
                        }
                        elseif ($target.ObjectClass -in ("organizationalUnit", "container", "domainDNS", "msDS-QuotaContainer", "msTPM-InformationObjectsContainer")) {
                            $delObjectTarget = $target;
                            break
                        }
                        else {
                            Write-Host "$target"
                            return
                        }
                    }
                }
            }
            $result = $global:objects | Where-Object { $delObjectTarget.DistinguishedName -eq $_.PreviousObject } | Sort-Object -Property ObjectClass, Name | Format-Table -Property Name, ObjectClass | Out-String
            $result | Out-HostColored @{ ('.+(([Cc]ontainer)|(organizationalUnit)|(domainDNS))\b') = "Blue"; ('.+\b((Person)|(User)|(InetOrgPerson)|(contact))\b') = "DarkGreen"; ('.+\bGroup\b') = "Yellow"; ('.+\bComputer\b') = "Cyan"}
        </Code>
    </Command>
    <Command Name="delObject" Description="Removes Active Directory object." Synopsis="Removes Active Directory object or objects.">
        <Arguments>
            <Argument Name="targetDir" Mandatory="True" Position="0" Type="String" Description="Target object" />
        </Arguments>
        <Examples>
            <Example value='delObject testuser'></Example>
            <Example value='delObject System'></Example>
        </Examples>
            <Code>
                $tempDir = @()
                $delObjectTarget = $global:currentLoc
                $tempHomeDir = ""
                $global:ADSHhome.DistinguishedName.split(",") | ForEach-Object {
                    $tempHomeDir = "/" + $_.split("=")[1] + $tempHomeDir
                }
                $targetDir = $targetDir -replace "$tempHomeDir","~"
                $targetDir = $targetDir -replace '(^/)|(/$)',""
                $tempDir = $targetDir.split("/")
                for ($i = 0; $i -lt $tempDir.Count; $i++){
                    switch ($tempDir[$i]) {
                        "" { break }
                        "." { break }
                        ".." { $delObjectTarget = $global:objects | Where-Object { $delObjectTarget.PreviousObject -eq $_.DistinguishedName }; break }
                        "~" { $delObjectTarget = $global:ADSHhome ; break }
                        Default {
                            $target = $global:objects | Where-Object { $delObjectTarget.DistinguishedName -eq $_.PreviousObject -and $_.Name -eq $tempDir[$i] }
                            if ($null -eq $target) {
                                Write-Host "No $_ object found. Aborting."
                                return
                            }
                            else {
                                $delObjectTarget = $target;
                                break   
                            }
                        }
                    }
                }
                $delObjectTarget | Remove-ADObject
                global:getObjectStructure
            </Code>
    </Command>
    <Command Name="addUser" Description="Adds Active Directory user." Synopsis="Adds Active Directory user. With default password Pa$$w0rd">
        <Arguments>
            <Argument Name="targetDir" Mandatory="True" Type="String" Position="0" Description="New user location" />
            <Argument Name="Password" Mandatory="False" Type="String" Description="User Password" />
        </Arguments>
        <Examples>
            <Example value='addUser testuser ~/'></Example>
            <Example value='addUser testuser -Password "zaq1@WSX"'></Example>
        </Examples>
            <Code>
                $objectTarget = $global:currentLoc
                $tempDir = @()
                $tempHomeDir = ""
                $global:ADSHhome.DistinguishedName.split(",") | ForEach-Object {
                    $tempHomeDir = "/" + $_.split("=")[1] + $tempHomeDir
                }
                $targetDir = $targetDir -replace "$tempHomeDir","~"
                $targetDir = $targetDir -replace '(^/)|(/$)',""
                $tempDir = $targetDir.split("/")
                for ($i = 0; $i -lt $tempDir.Count; $i++){
                    switch ($tempDir[$i]) {
                        "" { break }
                        "." { break }
                        ".." { $objectTarget = $global:objects | Where-Object { $objectTarget.PreviousObject -eq $_.DistinguishedName }; break }
                        "~" { $objectTarget = $global:ADSHhome ; break }
                        Default {
                            $target = $global:objects | Where-Object { $objectTarget.DistinguishedName -eq $_.PreviousObject -and $_.Name -eq $tempDir[$i] }
                            if ($null -eq $target -and $i -eq $tempDir.Count - 1) {
                                $name = $tempDir[$i]
                                break
                            }
                            elseif($i -lt $tempDir.Count - 1) {
                                $objectTarget = $target
                            }
                            else {
                                Write-Host "$_ object already exists. Aborting"
                                return 
                            }
                        }
                    }
                }
                $path = $objectTarget.DistinguishedName | Out-String
                $command = 'New-ADUser -Path $path -Name "$name" -Confirm  -AccountPassword (ConvertTo-SecureString “Pa$$w0rd” -AsPlainText -force) -Enabled $true'
                Invoke-Expression $command
                global:getObjectStructure
            </Code>
    </Command>
    <Command Name="addGroup" Description="Adds Active Directory group." Synopsis="Adds Active Directory group.">
        <Arguments>
            <Argument Name="targetDir" Mandatory="True" Type="String" Position="0" Description="New group location" />
            <Argument Name="Type" Mandatory="False" Type="String" Position="1" Default="Security" Description="Group Type" />
            <Argument Name="Scope" Mandatory="False" Type="String" Position="2" Default="DomainLocal" Description="Group Scope" />
        </Arguments>
        <Examples>
            <Example value='addUser testuser ~/'></Example>
            <Example value='addUser ../../users/testuser'></Example>
        </Examples>
            <Code>
                $objectTarget = $global:currentLoc
                $tempDir = @()
                $tempHomeDir = ""
                $global:ADSHhome.DistinguishedName.split(",") | ForEach-Object {
                    $tempHomeDir = "/" + $_.split("=")[1] + $tempHomeDir
                }
                $targetDir = $targetDir -replace "$tempHomeDir","~"
                $targetDir = $targetDir -replace '(^/)|(/$)',""
                $tempDir = $targetDir.split("/")
                for ($i = 0; $i -lt $tempDir.Count; $i++){
                    switch ($tempDir[$i]) {
                        "" { break }
                        "." { break }
                        ".." { $objectTarget = $global:objects | Where-Object { $objectTarget.PreviousObject -eq $_.DistinguishedName }; break }
                        "~" { $objectTarget = $global:ADSHhome ; break }
                        Default {
                            $target = $global:objects | Where-Object { $objectTarget.DistinguishedName -eq $_.PreviousObject -and $_.Name -eq $tempDir[$i] }
                            if ($null -eq $target -and $i -eq $tempDir.Count - 1) {
                                $name = $tempDir[$i]
                                break
                            }
                            elseif($i -lt $tempDir.Count - 1) {
                                $objectTarget = $target
                            }
                            else {
                                Write-Host "$_ object already exists. Aborting"
                                return 
                            }
                        }
                    }
                }
                $path = $objectTarget.DistinguishedName | Out-String
                New-ADGroup -Path $path -Name "$name" -Confirm -GroupCategory "$type" -GroupScope "$scope"
                global:getObjectStructure
            </Code>
    </Command>
</Commands>